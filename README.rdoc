= Forme

Forme is a HTML forms library for ruby with the following goals:

1. Have no external dependencies
2. Have a simple API
3. Support forms both with and without related objects
4. Allow compiling down to different types of output

= Basic Usage

Without an object, is a simple form builder:

  f = Forme::Form.new
  f.open(:action=>'/foo', :method=>:post) # '<form action="/foo" method="post">
  f.input(:textarea, :value=>'foo', :name=>'bar') # '<textarea name="bar">foo</textarea>'
  f.input(:text, :value=>'foo', :name=>'bar') # '<input name="bar" type="text" value="foo"/>'
  f.close # '</form>'

With an object, calls +forme_input+ on the obj with the form, field, and options, which
should return a <tt>Forme::Input</tt> instance.

  f = Forme::Form.new(obj)
  # obj.forme_input(:field, opts)
  # => Forme::Input.new(:text, :name=>'obj[field]', :id=>'obj_field', :value=>'foo')
  f.input(:field) # '<input id="obj_field" name="obj[field]" type="text" value="foo"/>'

If the object doesn't respond to +forme_input+, it falls back to creating text fields
with the name and id set to the field name and the value set by calling the given method
on the object.

  f = Forme::Form.new([:foo])
  f.input(:first) # '<input id="first" name="first" type="text" value="foo"/>'

= DSL

Forme comes with DSL:

  Forme.form(:action=>'/foo') do |f|
    f.input(:text, :name=>'bar')
    f.tag(:fieldset) do
      f.input(:textarea, :name=>'baz')
    end
  end
  # <form action="/foo">
  #   <input name="bar" type="text"/>
  #   <fieldset>
  #     <textarea name="baz"></textarea>
  #   </fieldset>
  # </form>

= Main Classes

<tt>Forme::Form</tt> :: main object
<tt>Forme::Input</tt> :: high level abstract tag
<tt>Forme::Tag</tt> :: low level abstract tag 
<tt>Forme::Formatter</tt> :: takes input, returns tag
<tt>Forme::Labeler</tt> :: takes tag, returns labeled version
<tt>Forme::Wrapper</tt> :: takes (potentially labeled) tag, returns (potentially wrapped) version of tag
<tt>Forme::Serializer</tt> :: tags tag, returns string

See +Forme+ module RDoc documentation for a technical description of how the library
uses the +Formatter+, +Labeler+, +Wrapper+, and +Serializer+ classes for converting
+Input+ instances to +Tag+ instances and finally to html strings.

= Sequel Support

Forme ships with a Sequel plugin (use <tt>Sequel::Model.plugin :forme</tt> to enable), that makes
Sequel::Model instances support the +forme_input+ method and return customized inputs, such as
checkboxes for boolean columns cannot be NULL, 3-valued select boxes for boolean columns that can be
NULL, select boxes for many_to_one associations, and multi-select boxes for *_to_many associations.

= Sinatra ERB Support

Forme ships with a Sinatra extension that you can get by <tt>require "forme/sinatra"</tt> and using
<tt>helpers Forme::Sinatra::ERB</tt> in your Sinatra::Application class.  It allows you to use the
following API in your Sinatra ERB forms:

  <% form(@obj, :action=>'/foo') do |f| %>
    <%= f.input(:field) %>
    <% f.tag(:fieldset) do %>
      <%= f.input(:field_two) %>
    <% end%>
  <% end%>

= Other Similar Projects

All of these have external dependencies:

1. Rails built-in helpers
2. Formtastic
4. simple_form
3. padrino-helpers

= Author

Jeremy Evans <code@jeremyevans.net>
